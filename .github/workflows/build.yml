name: Build and Test

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  linux-build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Compute Version
      id: set-version
      run: |
        VERSION="0.0.${{ github.run_number }}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build
      run: |
        dotnet restore
        dotnet build --configuration Release /p:Version="${{ env.VERSION }}" /p:AssemblyVersion="${{ env.VERSION }}" /p:FileVersion="${{ env.VERSION }}" /p:InformationalVersion="${{ env.VERSION }}" --no-restore
         
    - name: Upload NuGet Package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: |
          NYaul/bin/Release/NYaul.*.nupkg
          NYaul/bin/Release/NYaul.*.snupkg
        retention-days: 30

  matrix-test:
    needs: linux-build
    strategy:
      matrix:
        # os: [ubuntu-latest, windows-latest]
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            test-results: test-results-linux.trx
            shell: bash
          - os: windows-latest
            test-results: test-results-windows.trx
            shell: pwsh
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Download NuGet Package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget-packages

    - name: Setup Local NuGet Source and Replace Reference (Linux)
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      env:
        VERSION: ${{ needs.linux-build.outputs.version }}
      run: |
        NUGET_SOURCE="$PWD/nuget-packages"
        TEST_PROJ="$PWD/NYaul.Tests/NYaul.Tests.csproj"
        
        echo "Using NuGet source: $NUGET_SOURCE"
        dotnet nuget add source "$NUGET_SOURCE" --name local-packages
        
        dotnet restore "$TEST_PROJ"
        dotnet remove "$TEST_PROJ" reference ../NYaul/NYaul.csproj
        dotnet add "$TEST_PROJ" package NYaul --source "$NUGET_SOURCE"

    - name: Setup Local NuGet Source and Replace Reference (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      env:
        VERSION: ${{ needs.linux-build.outputs.version }}
      run: |
        $NugetSource = "$pwd\nuget-packages"
        $TestProj = "$pwd\NYaul.Tests\NYaul.Tests.csproj"
        
        echo "Using NuGet source: $NugetSource"
        dotnet nuget add source "$NugetSource" --name local-packages
        
        dotnet restore $TestProj
        dotnet remove $TestProj reference ..\NYaul\NYaul.csproj
        dotnet add $TestProj package NYaul --source $NugetSource

    - name: Run Tests
      run: dotnet test NYaul.Tests/NYaul.Tests.csproj --configuration Release --logger "trx;LogFileName=${{ matrix.test-results }}"

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}
        path: NYaul.Tests/TestResults/${{ matrix.test-results }}
        retention-days: 30

#  Upload to NuGet.org using bitwarden secrets
  NugetUpload:
    needs: matrix-test
    runs-on: ubuntu-latest
    steps:
    - name: Download NuGet Package
      uses: actions/download-artifact@v4
      with:
        name: nuget-package
        path: nuget-packages

    - name: Get Secrets
      uses: bitwarden/sm-action@v2
      with:
        access_token: ${{ secrets.BW_ACCESS_TOKEN }}
        base_url: https://vault.bitwarden.eu
        secrets: |
          265b2fb6-2cf0-4859-9bc8-b24c00ab4378 > NUGET_API_KEY

    - name: Upload to NuGet.org
      run: |
        NUGET_SOURCE="$PWD/nuget-packages"
        
        echo "Using NuGet source: $NUGET_SOURCE"
        dotnet nuget push "$NUGET_SOURCE/NYaul.*.nupkg" --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
        dotnet nuget push "$NUGET_SOURCE/NYaul.*.snupkg" --api-key "$NUGET_API_KEY

        echo "Upload complete"
        echo "Version: ${{ needs.linux-build.outputs.version }}"
        echo "Build Number: ${{ github.run_number }}"
    

