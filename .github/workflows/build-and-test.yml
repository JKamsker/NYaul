name: Build and Test

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:
    inputs:
      skip_windows_build:
        description: 'Skip Windows build'
        required: false
        type: boolean
        default: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  linux-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Build
      run: |
        dotnet restore
        dotnet build --configuration Release --no-restore

    - name: Upload Build Output
      uses: actions/upload-artifact@v4
      with:
        name: linux-build-output
        path: |
          **/bin/Release/
          **/obj/Release/
        retention-days: 1

    - name: Upload Linux NuGet Package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package-linux
        path: NYaul/bin/Release/NYaul.*.nupkg
        retention-days: 30

  linux-test:
    needs: linux-build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Download Build Output
      uses: actions/download-artifact@v4
      with:
        name: linux-build-output
        path: .

    - name: List Build Output
      run: |
        echo "Build output contents:"
        find . -name "*.dll" -type f

    - name: Test
      run: |
        TEST_DLL=$(find . -name "NYaul.Tests.dll" -path "*/Release/net8.0/*" -type f)
        if [ -z "$TEST_DLL" ]; then
          echo "Error: Could not find NYaul.Tests.dll in Release/net8.0"
          exit 1
        fi
        echo "Found test dll at: $TEST_DLL"
        dotnet test "$TEST_DLL" --no-build --framework net8.0 --logger "trx;LogFileName=TestResults/test-results.trx" --results-directory TestResults
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-linux
        path: TestResults
        retention-days: 30

  windows-build:
    runs-on: windows-latest
    if: ${{ !inputs.skip_windows_build }}
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.10.2
      with:
        versionSpec: '5.x'
        preferLatestVersion: true

    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0.10.2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore NuGet Packages
      run: nuget restore NYaul.sln

    - name: Build Solution
      run: |
        msbuild NYaul.sln /p:Configuration=Release /p:Platform="Any CPU" /p:Version="${{ steps.gitversion.outputs.semVer }}" /p:AssemblyVersion="${{ steps.gitversion.outputs.assemblySemVer }}" /p:FileVersion="${{ steps.gitversion.outputs.assemblySemFileVer }}" /p:InformationalVersion="${{ steps.gitversion.outputs.informationalVersion }}" /restore
        msbuild NYaul.Tests\NYaul.Tests.csproj /p:Configuration=Release /p:Platform="Any CPU" /t:Build /p:TargetFramework=net481

    - name: Upload Build Output
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-output
        path: |
          **/bin/Release/
          **/obj/Release/
        retention-days: 1

    - name: Upload NuGet Package
      uses: actions/upload-artifact@v4
      with:
        name: nuget-package
        path: NYaul/bin/Release/NYaul.*.nupkg
        retention-days: 30

  windows-test:
    needs: windows-build
    if: ${{ !inputs.skip_windows_build }}
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup VSTest
      uses: darenm/Setup-VSTest@v1

    - name: Download Build Output
      uses: actions/download-artifact@v4
      with:
        name: windows-build-output
        path: .

    - name: Create TestResults Directory
      run: mkdir TestResults -Force

    - name: Test .NET Framework
      run: vstest.console.exe NYaul.Tests\bin\Release\net481\NYaul.Tests.dll /Logger:"trx;LogFileName=TestResults/net481-test-results.trx"

    - name: Test .NET Core
      run: |
        $testDll = Get-ChildItem -Path . -Filter NYaul.Tests.dll -Recurse | Where-Object { $_.FullName -like "*Release\net8.0*" } | Select-Object -First 1
        if (-not $testDll) {
            Write-Error "Could not find NYaul.Tests.dll in Release/net8.0"
            exit 1
        }
        Write-Host "Found test dll at: $($testDll.FullName)"
        dotnet test $testDll.FullName --no-build --configuration Release --framework net8.0 --logger "trx;LogFileName=TestResults/net8-test-results.trx" --results-directory TestResults

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-windows
        path: TestResults
        retention-days: 30

  provide-latest-artifacts:
    needs: [linux-build]
    runs-on: ubuntu-latest
    if: ${{ inputs.skip_windows_build }}
    steps:
      - name: Download Linux Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: nuget-package-linux
          path: artifacts-linux

      - name: Check Linux Artifacts
        id: check-linux
        run: |
          if [ -n "$(ls -A artifacts-linux/*.nupkg 2>/dev/null)" ]; then
            echo "has_artifacts=true" >> $GITHUB_OUTPUT
          else
            echo "has_artifacts=false" >> $GITHUB_OUTPUT

      - name: Download Previous Windows Artifacts
        if: steps.check-linux.outputs.has_artifacts != 'true'
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-and-test.yml
          workflow_conclusion: success
          branch: ${{ github.ref_name }}
          name: nuget-package
          path: artifacts-windows
          if_no_artifact_found: warn

      - name: Upload Final NuGet Package
        uses: actions/upload-artifact@v4
        with:
          name: nuget-package
          path: ${{ steps.check-linux.outputs.has_artifacts == 'true' && 'artifacts-linux/*.nupkg' || 'artifacts-windows/*.nupkg' }}
          retention-days: 30